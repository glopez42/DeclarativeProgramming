section_env([file_top_section,pragmas([]),paper_opts(1,afourpaper),coversec([],[],[[string_esc("Guillermo Lopez Garcia, a180182")]],[],nop,nop,[]),level(0)],global_label("Sumas de pares de listas y cuadrados"),[string_esc("Sumas de pares de listas y cuadrados")],[show_toc(subparts),section_env([unnumbered,level(1),subfile(fulltoc),is_special(toc)],global_label("Table of Contents"),string_esc("Table of Contents"),[show_toc(full)]),section_env([unnumbered,level(1),subfile(intro)],global_label("codigo"),string_esc("codigo"),[[],[raw_nl,[[string_esc("Este modulo define dos programas, sumlists/4 y square_lists/3."),p([]),string_esc("Para el primero, dado un numero N par, se devuelven dos listas L1 y L2 que contienen entre las dos los números de Peano de 1 a N y cuya suma es la misma, S. "),section_env([level(3)],local_label("Ejemplos de uso:"),[string_esc("Ejemplos de uso:")],[string_esc(" "),env_(enumerate,[string_esc(" "),item([]),string_esc("Ej: "),codeblock("text","
?- sumlists(s(s(s(s(0)))),L1,L2,S).

L1 = [s(s(s(0))),s(s(0))],
L2 = [s(s(s(s(0)))),s(0)],
S = s(s(s(s(s(0))))) ? 
yes
?-"),string_esc(" "),item([]),string_esc("Ej: "),codeblock("text","
?- sumlists(s(s(s(s(s(s(s(s(0)))))))),L1,L2,S).

L1 = [s(s(s(s(s(s(s(0))))))),s(s(s(s(s(0))))),s(s(s(s(0)))),s(s(0))],
L2 = [s(s(s(s(s(s(0)))))),s(s(s(s(s(s(s(s(0)))))))),s(s(s(0))),s(0)],
S = s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(0)))))))))))))))))) ? 
yes
?-"),string_esc(" ")]),string_esc(" "),p([]),string_esc("Por otra parte, para square_lists/4, dado un numero N, se devuelve una matriz cuadrada de N*N que contiene todos los numeros de Peano del 1 a N² y cuyas filas suman lo mismo. ")]),section_env([level(3)],local_label("Ejemplos de uso:"),[string_esc("Ejemplos de uso:")],[string_esc(" "),env_(enumerate,[string_esc(" "),item([]),string_esc("Ej: "),codeblock("text","
?- square_lists(s(s(0)),SQ,S).

S = s(s(s(s(s(0))))),
SQ = [[s(s(s(0))),s(s(0))],[s(s(s(s(0)))),s(0)]] ? 

yes
?-"),string_esc(" "),item([]),string_esc("Ej: "),codeblock("text","
?- square_lists(s(s(s(0))),SQ,S).

S = s(s(s(s(s(s(s(s(s(s(s(s(s(s(s(0))))))))))))))),
SQ = [[s(s(s(s(s(s(s(s(0)))))))),s(s(s(s(0)))),s(s(s(0)))],
     [s(s(s(s(s(s(s(0))))))),s(s(s(s(s(s(0)))))),s(s(0))],
     [s(s(s(s(s(s(s(s(s(0))))))))),s(s(s(s(s(0))))),s(0)]] ? 

yes
?-"),string_esc(" ")]),string_esc(" "),p([]),string_esc("Mas adelante se muestran los predicados y propiedades que se han utilizado. ")])]],linebreak],[section_env([with_parent,level(2)],local_label("Usage and interface"),string_esc("Usage and interface"),cartouche(itemize_env(bullet,[[item([]),bf([string_esc("Library usage"),string_esc(":")]),linebreak,tt(string_esc(":- use_module(/home/guilogar/UPM/6semestre/ProDeclarativa/sumlistPeano/codigo.pl)."))],[item([]),bf([string_esc("Exports"),string_esc(":")]),linebreak,itemize_env(minus,[[[item([]),em([string_esc("Predicates"),string_esc(":")]),linebreak,[[[idx_env(use,code,localnum_label("0"),string_esc("alumno_prode/4"),string_esc("alumno_prode/4")),string_esc(", ")],[idx_env(use,code,localnum_label("1"),string_esc("plus/3"),string_esc("plus/3")),string_esc(", ")],[idx_env(use,code,localnum_label("2"),string_esc("nums/2"),string_esc("nums/2")),string_esc(", ")],[idx_env(use,code,localnum_label("3"),string_esc("sumlist/2"),string_esc("sumlist/2")),string_esc(", ")],[idx_env(use,code,localnum_label("4"),string_esc("choose_one/3"),string_esc("choose_one/3")),string_esc(", ")],[idx_env(use,code,localnum_label("5"),string_esc("perm/2"),string_esc("perm/2")),string_esc(", ")],[idx_env(use,code,localnum_label("6"),string_esc("split/3"),string_esc("split/3")),string_esc(", ")],[idx_env(use,code,localnum_label("7"),string_esc("sumlists/4"),string_esc("sumlists/4")),string_esc(", ")],[idx_env(use,code,localnum_label("8"),string_esc("make_matrix/3"),string_esc("make_matrix/3")),string_esc(", ")],[idx_env(use,code,localnum_label("9"),string_esc("take_N/4"),string_esc("take_N/4")),string_esc(", ")],[idx_env(use,code,localnum_label("10"),string_esc("check_sum/2"),string_esc("check_sum/2")),string_esc(", ")],[idx_env(use,code,localnum_label("11"),string_esc("times/3"),string_esc("times/3")),string_esc(", ")],[idx_env(use,code,localnum_label("12"),string_esc("exp/3"),string_esc("exp/3")),string_esc(", ")],[idx_env(use,code,localnum_label("13"),string_esc("greater_zero/1"),string_esc("greater_zero/1")),string_esc(", ")],[idx_env(use,code,localnum_label("14"),string_esc("square_lists/3"),string_esc("square_lists/3")),string_esc(".")]],raw_nl]],nop,[item([]),em([string_esc("Properties"),string_esc(":")]),linebreak,[[[idx_env(use,code,localnum_label("15"),string_esc("nat/1"),string_esc("nat/1")),string_esc(", ")],[idx_env(use,code,localnum_label("16"),string_esc("lista/1"),string_esc("lista/1")),string_esc(".")]],raw_nl]],nop,nop,nop],nop])],nop,nop,nop,nop]))),[],[],section_env([with_parent,level(2)],local_label("Documentation on exports"),string_esc("Documentation on exports"),[[defpred(local_label("alumno_prode/4"),pred,"PREDICATE",alumno_prode/4,[],[string_esc("No further documentation available for this predicate."),[[]]]),sp("1"),raw_nl],[defpred(local_label("nat/1"),prop,"PROPERTY",nat/1,[],[[],[[defassrt(check,[],"Usage:",[[string_esc([]),tt(string_esc("nat(N)")),string_esc([])],raw_nl],[string_esc("Cierto si "),var([string_esc("N")]),string_esc(" "),string_esc("es un numero natural. "),env_(verbatim,[raw_string("nat(0).
nat(s(X)) :-
    nat(X).
")])],assrtprops([],[],[],[]))]]]),sp("1"),raw_nl],[defpred(local_label("lista/1"),prop,"PROPERTY",lista/1,[],[[],[[defassrt(check,[],"Usage:",[[string_esc([]),tt(string_esc("lista(L)")),string_esc([])],raw_nl],[string_esc("Cierto si "),var([string_esc("L")]),string_esc(" "),string_esc("es una lista. "),env_(verbatim,[raw_string("lista([]).
lista([_1|Y]) :-
    lista(Y).
")])],assrtprops([],[],[],[]))]]]),sp("1"),raw_nl],[defpred(local_label("plus/3"),pred,"PREDICATE",plus/3,[],[[],[[defassrt(check,[],"Usage:",[[string_esc([]),tt(string_esc("plus(A,B,C)")),string_esc([])],raw_nl],[string_esc("Cierto si "),var([string_esc("A")]),string_esc(" "),string_esc("+ "),var([string_esc("B")]),string_esc(" "),string_esc("= "),var([string_esc("C")]),string_esc(". "),env_(verbatim,[raw_string("plus(X,0,X) :-
    nat(X).
plus(X,s(Y),s(Z)) :-
    plus(X,Y,Z).
")])],assrtprops([],[],[],[]))],[[[],[]],[]],[[raw_nl,bf(string_esc("Other properties:")),string_esc(" ")],[defassrt(check,[],"Test:",[[string_esc([]),tt(string_esc("plus(A,B,C)")),string_esc([])],raw_nl],[string_esc("2 + 1 = 3")],assrtprops([],[[item([]),em(string_esc("If the following properties hold at call time:"))],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("17"),string_esc("A=s(s(0))"),string_esc("A=s(s(0))"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("18"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])],[linebreak,left_and_right([[idx_env(use,prop,localnum_label("19"),string_esc("B=s(0)"),string_esc("B=s(0)"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("20"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold upon exit:")),raw_nl],[[linebreak,left_and_right([[idx_env(use,prop,localnum_label("21"),string_esc("C=s(s(s(0)))"),string_esc("C=s(s(s(0)))"))],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("22"),string_esc("= /2"),string_esc("= /2"))],string_esc(")")]])]],raw_nl],[[linebreak,em(string_esc("then the following properties should hold globally:")),raw_nl],[[linebreak,left_and_right([[string_esc("All the calls of the form "),var([string_esc("plus(A,B,C)")]),string_esc(" "),string_esc("do not fail.")],raw_nl],[[],[string_esc(" ("),[idx_env(use,prop,localnum_label("23"),string_esc("not_fails/1"),string_esc("not_fails/1"))],string_esc(")")]])]],raw_nl]))]]]]),sp("1"),raw_nl],[defpred(local_label("nums/2"),pred,"PREDICATE",nums/2,[],[[],[[defassrt(check,[],"Usage:",[[string_esc([]),tt(string_esc("nums(N,L)")),string_esc([])],raw_nl],[string_esc("Cierto si "),var([string_esc("L")]),string_esc(" "),string_esc("es una lista descendente de "),var([string_esc("N")]),string_esc(" "),string_esc("a 1. "),env_(verbatim,[raw_string("nums(0,[]).
nums(s(N),[s(N)|Np]) :-
    nums(N,Np).
")])],assrtprops([],[],[],[]))]]]),sp("1"),raw_nl],[defpred(local_label("sumlist/2"),pred,"PREDICATE",sumlist/2,[],[[],[[defassrt(check,[],"Usage:",[[string_esc([]),tt(string_esc("sumlist(L,N)")),string_esc([])],raw_nl],[string_esc("Cierto si "),var([string_esc("N")]),string_esc(" "),string_esc("es la suma de elementos de "),var([string_esc("L")]),string_esc(". "),env_(verbatim,[raw_string("sumlist([],0).
sumlist([N|Np],S) :-
    sumlist(Np,Sp),
    plus(N,Sp,S).
")])],assrtprops([],[],[],[]))]]]),sp("1"),raw_nl],[defpred(local_label("choose_one/3"),pred,"PREDICATE",choose_one/3,[],[[],[[defassrt(check,[],"Usage:",[[string_esc([]),tt(string_esc("choose_one(E,L,R)")),string_esc([])],raw_nl],[string_esc("Cierto si "),var([string_esc("R")]),string_esc(" "),string_esc("es igual a "),var([string_esc("L")]),string_esc(" "),string_esc("sin el elemento "),var([string_esc("E")]),string_esc(". "),env_(verbatim,[raw_string("choose_one(E,[E|Lp],Lp) :-
    lista(Lp).
choose_one(E,[X|Lp],[X|Rp]) :-
    choose_one(E,Lp,Rp).
")])],assrtprops([],[],[],[]))]]]),sp("1"),raw_nl],[defpred(local_label("perm/2"),pred,"PREDICATE",perm/2,[],[[],[[defassrt(check,[],"Usage:",[[string_esc([]),tt(string_esc("perm(L,Lp)")),string_esc([])],raw_nl],[string_esc("Cierto si "),var([string_esc("Lp")]),string_esc(" "),string_esc("es una permutacion de "),var([string_esc("L")]),string_esc(". "),env_(verbatim,[raw_string("perm([],[]).
perm([X|R],L) :-
    perm(R,Lp),
    choose_one(X,L,Lp).
")])],assrtprops([],[],[],[]))]]]),sp("1"),raw_nl],[defpred(local_label("split/3"),pred,"PREDICATE",split/3,[],[[],[[defassrt(check,[],"Usage:",[[string_esc([]),tt(string_esc("split(L,Lp,Li)")),string_esc([])],raw_nl],[string_esc("Cierto si "),var([string_esc("Lp")]),string_esc(" "),string_esc("tiene los elementos de posicion par de "),var([string_esc("L")]),string_esc(", y "),var([string_esc("Li")]),string_esc(", los de posicion impar. "),env_(verbatim,[raw_string("split([],[],[]).
split([X1,X2|Xn],[X1|Xp],[X2|Xpp]) :-
    split(Xn,Xp,Xpp).
")])],assrtprops([],[],[],[]))]]]),sp("1"),raw_nl],[defpred(local_label("sumlists/4"),pred,"PREDICATE",sumlists/4,[],[[],[[defassrt(check,[],"Usage:",[[string_esc([]),tt(string_esc("sumlists(N,L1,L2,S)")),string_esc([])],raw_nl],[string_esc("Cierto si "),var([string_esc("L1")]),string_esc(" "),string_esc("y "),var([string_esc("L2")]),string_esc(" "),string_esc("contienen entre las dos los naturales de "),var([string_esc("N")]),string_esc(" "),string_esc("hasta 1, y ambas suman lo mismo."),env_(verbatim,[raw_string("sumlists(N,L1,L2,S) :-
    nums(N,L),
    perm(L,Lp),
    split(Lp,L1,L2),
    sumlist(L1,S),
    sumlist(L2,S).
")])],assrtprops([],[],[],[]))]]]),sp("1"),raw_nl],[defpred(local_label("make_matrix/3"),pred,"PREDICATE",make_matrix/3,[],[[],[[defassrt(check,[],"Usage:",[[string_esc([]),tt(string_esc("make_matrix(L,N,M)")),string_esc([])],raw_nl],[string_esc("Cierto si "),var([string_esc("M")]),string_esc(" "),string_esc("es una matriz de "),var([string_esc("N")]),string_esc("*"),var([string_esc("N")]),string_esc(" "),string_esc("formada por los elementos de "),var([string_esc("L")]),string_esc(". "),env_(verbatim,[raw_string("make_matrix([],_1,[]).
make_matrix(Lista,N,[Fila|Filas]) :-
    take_N(Lista,N,Fila,Rest),
    make_matrix(Rest,N,Filas).
")])],assrtprops([],[],[],[]))]]]),sp("1"),raw_nl],[defpred(local_label("take_N/4"),pred,"PREDICATE",take_N/4,[],[[],[[defassrt(check,[],"Usage:",[[string_esc([]),tt(string_esc("take_N(L1,N,L2,Resto)")),string_esc([])],raw_nl],[string_esc("Cierto si "),var([string_esc("L2")]),string_esc(" "),string_esc("es una lista formada por los primeros "),var([string_esc("N")]),string_esc(" "),string_esc("elementos de "),var([string_esc("L1")]),string_esc(". "),var([string_esc("Resto")]),string_esc(" "),string_esc("contiene el resto de elementos de "),var([string_esc("L1")]),string_esc(". "),env_(verbatim,[raw_string("take_N(Rest,0,[],Rest).
take_N([Elem|Lista],s(N),[Elem|Lista2],Rest) :-
    take_N(Lista,N,Lista2,Rest).
")])],assrtprops([],[],[],[]))]]]),sp("1"),raw_nl],[defpred(local_label("check_sum/2"),pred,"PREDICATE",check_sum/2,[],[[],[[defassrt(check,[],"Usage:",[[string_esc([]),tt(string_esc("check_sum(M,S)")),string_esc([])],raw_nl],[string_esc("Cierto si la suma de todas las filas de "),var([string_esc("M")]),string_esc(" "),string_esc("suman "),var([string_esc("S")]),string_esc(". "),env_(verbatim,[raw_string("check_sum([],_1).
check_sum([Fila|Filas],Sum) :-
    sumlist(Fila,Sum),
    check_sum(Filas,Sum).
")])],assrtprops([],[],[],[]))]]]),sp("1"),raw_nl],[defpred(local_label("times/3"),pred,"PREDICATE",times/3,[],[[],[[defassrt(check,[],"Usage:",[[string_esc([]),tt(string_esc("times(A,B,C)")),string_esc([])],raw_nl],[string_esc("Cierto si "),var([string_esc("A")]),string_esc(" "),string_esc("* "),var([string_esc("B")]),string_esc(" "),string_esc("= "),var([string_esc("C")]),string_esc(" "),env_(verbatim,[raw_string("times(X,0,0) :-
    nat(X).
times(X,s(Y),Z) :-
    times(X,Y,W),
    plus(X,W,Z).
")])],assrtprops([],[],[],[]))]]]),sp("1"),raw_nl],[defpred(local_label("exp/3"),pred,"PREDICATE",exp/3,[],[[],[[defassrt(check,[],"Usage:",[[string_esc([]),tt(string_esc("exp(Exp,N,S)")),string_esc([])],raw_nl],[string_esc("Cierto si "),var([string_esc("N")]),string_esc("^"),var([string_esc("Exp")]),string_esc(" "),string_esc("= "),var([string_esc("S")]),string_esc(" "),env_(verbatim,[raw_string("exp(0,X,s(0)) :-
    nat(X).
exp(s(N),X,Y) :-
    exp(N,X,W),
    times(W,X,Y).
")])],assrtprops([],[],[],[]))]]]),sp("1"),raw_nl],[defpred(local_label("greater_zero/1"),pred,"PREDICATE",greater_zero/1,[],[[],[[defassrt(check,[],"Usage:",[[string_esc([]),tt(string_esc("greater_zero(N)")),string_esc([])],raw_nl],[string_esc("Cierto si "),var([string_esc("N")]),string_esc(" "),string_esc("es un natural mayor que 0. "),env_(verbatim,[raw_string("greater_zero(s(0)).
greater_zero(s(N)) :-
    greater_zero(N).
")])],assrtprops([],[],[],[]))]]]),sp("1"),raw_nl],[defpred(local_label("square_lists/3"),pred,"PREDICATE",square_lists/3,[],[[],[[defassrt(check,[],"Usage:",[[string_esc([]),tt(string_esc("square_lists(N,SQ,S)")),string_esc([])],raw_nl],[string_esc("Cierto si "),var([string_esc("SQ")]),string_esc(" "),string_esc("es una matriz de "),var([string_esc("N")]),string_esc("*"),var([string_esc("N")]),string_esc(", cuyas filas suman "),var([string_esc("S")]),string_esc(", y entre todas contienen los numeros de "),var([string_esc("N")]),string_esc("^2 hasta 1. "),env_(verbatim,[raw_string("square_lists(N,SQ,S) :-
    greater_zero(N),
    exp(s(s(0)),N,N2),
    nums(N2,Lista),
    perm(Lista,ListaP),
    make_matrix(ListaP,N,SQ),
    check_sum(SQ,S).
")])],assrtprops([],[],[],[]))]]]),sp("1"),raw_nl]]),[],[],section_env([with_parent,level(2)],local_label("Documentation on imports"),string_esc("Documentation on imports"),[string_esc("This module has the following direct dependencies:"),itemize_env(minus,[nop,nop,nop,[item([]),em([string_esc("Internal (engine) modules"),string_esc(":")]),linebreak,[[[idx_env(use,code,localnum_label("24"),string_esc("term_basic"),string_esc("term_basic")),string_esc(", ")],[idx_env(use,code,localnum_label("25"),string_esc("arithmetic"),string_esc("arithmetic")),string_esc(", ")],[idx_env(use,code,localnum_label("26"),string_esc("atomic_basic"),string_esc("atomic_basic")),string_esc(", ")],[idx_env(use,code,localnum_label("27"),string_esc("basiccontrol"),string_esc("basiccontrol")),string_esc(", ")],[idx_env(use,code,localnum_label("28"),string_esc("exceptions"),string_esc("exceptions")),string_esc(", ")],[idx_env(use,code,localnum_label("29"),string_esc("term_compare"),string_esc("term_compare")),string_esc(", ")],[idx_env(use,code,localnum_label("30"),string_esc("term_typing"),string_esc("term_typing")),string_esc(", ")],[idx_env(use,code,localnum_label("31"),string_esc("debugger_support"),string_esc("debugger_support")),string_esc(", ")],[idx_env(use,code,localnum_label("32"),string_esc("basic_props"),string_esc("basic_props")),string_esc(".")]],raw_nl]],[item([]),em([string_esc("Packages"),string_esc(":")]),linebreak,[[[idx_env(use,code,localnum_label("33"),string_esc("prelude"),string_esc("prelude")),string_esc(", ")],[idx_env(use,code,localnum_label("34"),string_esc("initial"),string_esc("initial")),string_esc(", ")],[idx_env(use,code,localnum_label("35"),string_esc("condcomp"),string_esc("condcomp")),string_esc(", ")],[idx_env(use,code,localnum_label("36"),string_esc("assertions"),string_esc("assertions")),string_esc(", ")],[idx_env(use,code,localnum_label("37"),string_esc("assertions/assertions_basic"),string_esc("assertions/assertions_basic")),string_esc(".")]],raw_nl]]])])]]),section_env([unnumbered,level(1),subfile(refs),is_special(references)],global_label("References"),string_esc("References"),[show_biblio]),section_env([unnumbered,level(1),subfile(search),is_special(search)],global_label("Search this manual"),string_esc("Search this manual"),[[raw_nl,[string_esc("Type below to search for where concepts, predicates,
 modes, properties, types, applications, authors, etc., are defined or
 referred to in this manual. Use "),tt(string_esc("_")),string_esc(" to show all entries in the index.")],linebreak],linebreak,htmlenv(input,[type="text",id="search-input"],[]),htmlenv(div,[id="search-results"],[]),htmlenv(div,[id="search-index",style="display:none"],[show_index(global)])])]).